<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>sidhant.io</title>
   
   <link>http://sidhant.io/</link>
   <description>Developer Chronicles</description>
   <language>en-us</language>
   <managingEditor> Sidhant Sharma</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>'Gitting' started</title>
	  <link>sidhant.io/gitting-started</link>
	  <author>Sidhant Sharma</author>
	  <pubDate>2016-03-01T00:00:00+05:30</pubDate>
	  <guid>sidhant.io/gitting-started</guid>
	  <description><![CDATA[
	     <p>Recently, I got a chance to be a part of one of the most kick-ass communities, whose software basically rules
the tech world. Yeah, Git. The aim was to get my hands dirty with something new and amazing.
So though this post isn&#39;t as much about my experience there (so far, great), but rather a stash of useful commands that one may require when actually contributing to Git. I&#39;ll keep it updated as often as possible. Though the documentation for getting involved is very educative and covers everything you&#39;re required to do, I decided to write this post since I couldn&#39;t find a complete set of commands (and concepts) we need to actually get started. Man pages are nice, but nothing beats a well written tutorial, right?</p>

<p><strong>TL;DR</strong>: Google it, click the first StackOverflow link, copy-paste the command in the top answer and hit enter. That&#39;ll [make/fix/do] it.</p>

<p>So, here&#39;s how we&#39;re gonna do. First, we&#39;ll walk through the basics of Git in case you want a refresher. Then we move on to the stuff we&#39;ll need very frequently for development. Let&#39;s get started.</p>

<h4>Getting started with Git</h4>

<p>First, if you&#39;re not familiar with what Git is and what it&#39;s for, go read <a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository">this</a> Atlassian tutorial to get an idea what we&#39;re dealing with here. Ideally, you should know some basic Git commands before can get started with contributing. Here&#39;s a summary of the important commands and concepts you should have an idea of. For everything else, <strong>RTFM</strong>, or... StackOverflow. If you think you know the basics pretty well, or have read through the Atlassian docs, go ahead skip to the <a href="#the-good-stuff">contributing section</a>:</p>

<p><strong>1. Creating new repo, adding and committing</strong></p>

<p>The first thing you need to do to get started is, no surprise, install Git. If you haven&#39;t installed on your system yet, get it from <a href="http://git-scm.com/downloads/">git-scm downloads</a>.</p>

<p>Now, like a fine English gentlemen, let&#39;s introduce ourselves to the newly installed software, starting with name and email.
This is done as:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;User Name [:nick]&quot;</span>
</code></pre></div>
<p>So, if you are John Travolta, with nickname jtrav, you&#39;ll do:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;John Travolta [:jtrav]&quot;</span>
</code></pre></div>
<p>You may vary the name string, like remove the colon before the nick, or the nick altogether. I put it there because 1. I like it there, and 2. it tells others your nick in case they wanna reach out on an irc or otherwise. But it&#39;s completely up to you.</p>

<p>Your email-id is as important as your name, especially for the Git community, so here&#39;s what we do:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git config --global user.email <span class="s2">&quot;&lt;my.email@example.com&gt;&quot;</span>
</code></pre></div>
<p>This should be same email ID you would be using for contributing to Git.</p>

<h5>PRO TIP:</h5>

<p>If you want to keep this ID separate from your usual id, you can skip the <code>--global</code> tag and configure the identity details separately for different projects.</p>

<p>Great, now you&#39;re all set to get started.</p>

<p><strong>2. The basics</strong></p>

<p>Now, we need a sample repository to get started with. You can make any regular directory (folder) a git-managed repository by running this simple command.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git init          <span class="c"># Tell git to initialize this directory as repository</span>
</code></pre></div>
<p>For those who like details, this creates a tiny hidden directory by the name <code>.git</code> in the current directory (which is now, by the way, a repository) that stores a lot of information the current and past states of this repository from this point on.</p>

<p>Now when you run</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git status
</code></pre></div>
<p>it&#39;ll list all the files in the repository in red. This basically means that all the files are although in the directory, but git
is not tracking them yet. So, we simply tell to do so, by</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git add .
</code></pre></div>
<p>The <code>.</code> tells git to add all files for tracking (more precisely, the staging area). You can add selected files by specifying the path. Now, we commit the changes to make them solid by committing them:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git commit -m <span class="s2">&quot;A commit message&quot;</span>
</code></pre></div>
<p>The <code>-m</code> let&#39;s you add an inline-comment. If you don&#39;t use that option, your default editor will be opened for you to enter
your commit message in. We try to keep commit messages short descriptive of the changes made in the commit.</p>

<p>Now, we are ready to &#39;push&#39; the changes to a remote, i.e., upload them to your server. If you&#39;re using Github or Bitbucket, it&#39;ll be you&#39;re repository&#39;s link (You can figure it out, it&#39;s no big deal). To add a new remote, we use:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git remote add origin &lt;link-to-remote&gt;
</code></pre></div>
<p>We push local changes to remote using:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git push origin master
</code></pre></div>
<p>Note that here, <code>origin</code> is the name of the remote, as we added in the second-last command, and <code>master</code> is the branch
where you are pushing the changes.</p>

<p>If you want to clone a repository hosted somewhere, you can do so by simply using:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git clone &lt;link-to-repository&gt;
</code></pre></div>
<p>To learn more about branching, refer to Atlassian documentation of [branching]. Same goes for other useful commands like
<a href="https://www.atlassian.com/git/tutorials/using-branches/git-branch">branch</a>, <a href="https://www.atlassian.com/git/tutorials/using-branches/git-merge">merge</a>, <a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase">rebase</a>, <a href="https://www.atlassian.com/git/tutorials/using-branches/git-checkout">checkout</a> and <a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/commit-level-operations">reset</a>.</p>

<p>Getting into more detailed description of these commands, and some other you may occasionally need will eventually turn this blog into another version of Git man pages, so we&#39;ll finish the overview here and get started with some dev.</p>

<p><br />
<span id="the-good-stuff"></span></p>

<h4>Contributing to Git</h4>

<p>The first step you <em>must</em> read the man pages. I can&#39;t emphasize enough, <strong><em>RTFM</em></strong>. Having cloned the Git repo from their <a href="https://github.com/git/git">Github repository</a>, you should definitely read the <a href="https://github.com/git/git/blob/master/README.md">README</a>, the <a href="https://github.com/git/git/blob/master/Documentation/CodingGuidelines">CodingGuidelines</a> and the <a href="https://github.com/git/git/blob/master/Documentation/SubmittingPatches">SubmittingPatches</a> docs. They&#39;ll tell you everything you must know.</p>

<p>Also, it is suggested that you should fork Git&#39;s Github repo and set up hooks for <a href="https://travis-ci.org/">Travis-CI</a>. So, before finally making a patch, you can check that your patch doesn&#39;t break the build for OS X or Linux. It&#39;s fairly easy to use and a free Travis account would serve you well, for both Git development and otherwise.
Now, as promised, the commands. Here we go.</p>

<p>The first thing we need quite often is <code>diff</code> and <code>format-patch</code>. <code>diff</code> is used, as you probably guessed, to diff between two commits, current HEAD and some commit, a single file&#39;s diff over a two commits and more; basically, anything you may need to compare with anything else. Particularly, these get handy:</p>

<p><em>1. Diff between unstaged/uncommited changes and last commit:</em></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git diff -- <span class="o">[</span>&lt;path-to-file&gt;<span class="o">]</span>
</code></pre></div>
<p>Square brackets indicate optional parameter. You can specify a single file or directory to diff. By default, all changes are diffed against last commit. To diff the current HEAD with any commit, we use:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git diff commit_id HEAD
</code></pre></div>
<p>where commit_id is the sha1 ID of the commit you want to diff HEAD with.
To diff the current HEAD and the last commit (last HEAD), simply use:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git diff HEAD^ HEAD
</code></pre></div>
<p>You can also <code>diff</code> to generate patches, example this creates a patch for the last commit:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git diff HEAD^ HEAD &gt; last_commit.patch
</code></pre></div>
<p>Another cool thing you can do with diff is check if you introduced extraneous whitespace while making changes.
To do that, just execute:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git diff --check <span class="o">[</span>commit_1 commit_2<span class="o">]</span>
</code></pre></div>
<p><em>2. Formatting patches using <code>format-patch</code></em></p>

<p>If you&#39;re going to send patches to git, you need to properly format them so they are readable
for all community members, and also adhere to the git standards. For this, an awesome command comes
with git, called <code>format-patch</code>. This allows you to make an email-ready formatted patch that you can send directly using
<code>send-email</code> or using another MUA client. More on MUA clients later.</p>

<p>A basic usage of <code>format-patch</code> is this:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git format-patch master -1
</code></pre></div>
<p>This creates a patch of the last 1 commit on master branch. You can do a lot more than just that make a simple patch for last commit. You can make patches for multiple commits as well. One standard form I use a lot is:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git format-patch -1 -o ../patches/receive-pack-parse-option-api/ --signoff --in-reply-to<span class="o">=</span><span class="s1">&#39;&lt;message-id&gt;&#39;</span> --patience <span class="o">[</span>-vN<span class="o">]</span>
</code></pre></div>
<p>Dissection of the above is as follows, <code>-1</code> tells git to make patch for last 1 commit. You may use -1commit id, commits relative to HEAD (Like HEAD~5), or a combination of commit ID and number of commits following it. <code>-o &lt;dir&gt;</code> tell git which directly to put the generated patch in. <code>--patience</code> tells it to use Patience algorithm (occasionally, patches are not very readable to others when using the default algorithm, so trying another algorithm helps). <code>--in-reply-to=&lt;message-id&gt;</code> adds an extra line to the patch head, indicating which email is this patch in reply to. It&#39;s usually used for replying to previous versions of your patch. You specify version number of your patch using <code>-vN</code> where N is the version number (integer, eg -v3). This makes your patch subject look like &quot;[PATCH v3] the commit message&quot;.</p>

<p><em>3. Undo commits</em></p>

<p>If often happens, that you get the patch right in the first try. In such a case, if you have committed the changes already, you want to un-commit them. For that, just do</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git reset HEAD~n
</code></pre></div>
<p>replacing &#39;n&#39; with required number of commits to be undone.
This doesn&#39;t delete the changes as a hard reset would, but simply uncommits them, and places them outside the staging area. This gets in handy when you need to make only slight modifications and commit again.</p>

<p><em>4. Squashing commits</em></p>

<p>So you made 4 commits, but realize that they should ideally belong to one. What do you do? Undo them with <code>reset</code> and commit again? What if there are conflicts? Fret not, <code>rebase</code> is to the rescue. So, we simply run</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git rebase -i &lt;after-this-commit&gt;
</code></pre></div>
<p>replacing <after-this-commit> with a commit ID, or something like HEAD~4. In the screen that follows, replace &#39;pick&#39; on the second and subsequent commits with &#39;squash&#39; or &#39;fixup&#39;, as described in <a href="http://git-scm.com/docs/git-rebase#_interactive_mode">the manual</a>.</p>

<p>But what if you accidentally pushed it to your forked repository? That rebase will work for local, but the remote won&#39;t accept it and you&#39;re pretty much back to square one, right? Not quite. Luckily, we can force a push, thus overwriting history of the remote [<em>CAUTION: There are serious implications of remote history rewrite. Try that you never have to use the following command.</em>]. For this, after squashing the commits locally, we push with slight change in syntax as:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git push gitfork +master
</code></pre></div>
<p>where gitfork is the name of your forked repo. The <code>+</code> tells git to force push only the specified branch, unlike --force, which would force-push all refs.</p>

<p>Again, this isn&#39;t a very good thing to do, so try not to push changes that you aren&#39;t 1000% sure of.</p>

<p><em>5. Sending mail with git</em></p>

<p>Once you&#39;ve prepared a patch and are ready to send it to the mailing list, you well, send it. But how? Your regular email client (GMail, Google Inbox, Outlook) won&#39;t be of much help. That is because most likely, your client uses HTML formatted emails and also supports word-wrapping, and sometime adds extraneous whitespace, which can make patches not apply cleanly. To avoid this, you can either learn to use <code>git send-email</code> or configure your MUA client for sending correctly formatted patches. I prefer sending patches using send-email, and use Thunderbird for regular emails (though you can configure Thunderbird to format patches) <sup><a href="#note-1">1</a></sup>. First, let&#39;s see the good ol&#39; command line method. Before we can use it, we need to install git send-email. On Linux, you can do something like</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>sudo apt-get install git-email
</code></pre></div>
<p>For other platforms, you may wanna Google it.
Next, we need to configure the email. <a href="http://blog.bisect.de/2012/01/how-to-send-patches-via-git-send-email.html">This</a> blogpost covers it well. I&#39;d only like to add this little thing, if you are going to use a GMail account, you may need to take one extra set to get everything working. You would be needed to go your account settings, and from there enable &#39;Access for Less Secure Apps&#39;. That&#39;s it, you&#39;re all set.</p>

<p>Now, to actually send an email, write:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git send-email ../patches/patch1.patch --to<span class="o">=</span><span class="s1">&#39;git@vger.kernel.org&#39;</span> <span class="o">[</span>--in-reply-to<span class="o">=</span><span class="s1">&#39;&lt;message-id&gt;&#39;</span><span class="o">]</span> <span class="o">[</span>--cc<span class="o">=</span><span class="s1">&#39;someone@example.com&#39;</span><span class="o">]</span>
</code></pre></div>
<p>Dissection of the command; <code>../patches/patch1.patch</code> is the patch you want to send. <code>--to</code> argument is the person (in this case, mailing list) you want to send the message to. <code>--in-reply-to</code> comes in handy when: 1. you&#39;re sending multiple patches, in which case you send the consequent patches in reply to the first patch; 2. when you&#39;re sending alternate/updated versions of a patch, which you do again, at the root of the email thread. <code>--cc</code> allows you to CC people, and you can specify this options multiple times with different argument each time. Other options are quite self-descriptive and the git docs are very well written ;)</p>

<p>That&#39;s it for now. I&#39;ll keep updating this post as find and learn more useful commands like the ones above. If you get stuck at anything, and git man pages don&#39;t help, try Googling it. It&#39;s ok, no one gets it right the first time. Usually, the top answer in the first StackOverflow link does the job.</p>

<p><sup id="note-1">1</sup> For more details on setting up MUA for sending patches, refer to <a href="https://git-scm.com/docs/git-format-patch">format-patch documentation</a>, under the heading &#39;MUA Specific Hints&#39;.</p>

<p><br /></p>

<p>Sorry for the long post, here&#39;s a cute potato</p>

<p><img src="/assets/images/post_images/cute_potato.png" alt="Cute Potato"></p>

	  ]]></description>
	</item>

	<item>
	  <title>The OpenCV Saga</title>
	  <link>sidhant.io/the-opencv-saga</link>
	  <author>Sidhant Sharma</author>
	  <pubDate>2015-10-20T00:00:00+05:30</pubDate>
	  <guid>sidhant.io/the-opencv-saga</guid>
	  <description><![CDATA[
	     <h3>Ch. 1 : I See You</h3>

<p>College. A temple of knowledge. A place to learn and grow.</p>

<p>Well, not quite. At least not in my experience. Though there isn&#39;t much I&#39;ve gained directly from attending classes (save for the cursory overview to a few subjects), I do admit I have had tonnes of opportunities to learn. And being the ever-curious soul I am, I didn&#39;t miss out out on any.</p>

<p>One such subject that has captured my imagination quite recently is Computer Vision, the magical technology that can make a computer &#39;see&#39;.</p>

<p>It started about 2 weeks ago, when my friends and I were brainstorming on what to present as a Minor project. We were running late already (thanks to our first Minor project idea <a href="#minor-one"><sup>1</sup></a>). So, while we were randomly pitching ideas to each other, I suggested making an android application that can print the details of the objects in focus on the screen, in real time. And at this point, we all hopped on to the computer vision train, waving at the stations (aka project ideas) as we passed them. This we did till we reached a project idea that was (seemingly) small, practical and achievable within the given time frame.
The idea was simple. A basic software that will translate your hand gestures into commands for your computer. There was a discussion on what specific type of commands it would support (from general control like navigation through the file system, controlling brightness, volume etc to simply controlling a music application). It was later decided that we will support a rather wild-card entry, Google Chrome browser.
To anyone who follows this blog, Google Chrome would be a surprise. Yes, I know me+Chrome is not a duo you see frequently, but as they say, anything for science.</p>

<p>So, that&#39;s enough backstory. Now on to the good stuff. Being noobs in the field of image processing, we decided to stay with python, for it was more comfortable to most of the team (excluding me, I prefer C/C++. Always.) Anyway, the development started and we did our research,found and discussed some techniques and algorithms.</p>

<p>Fast forward - Coding. The real good stuff.
There are a bunch of OpenCV tutorials available on the Internet, like <a href="http://opencvpython.blogspot.in/">this one</a> and <a href="https://www.pyimagesearch.com/">this one</a>. And of course, never forget to RTFM (OpenCV docs). This gave me a good head start for the task at hand.</p>

<p>I won&#39;t be going into details of the installation process (mainly because it is too boring and I need to catch up on sleep). So, hope you&#39;ll figure it out. (Psst.. unlike me, Google doesn&#39;t sleep)</p>

<h4>Say &#39;Cheese&#39;!</h4>

<p>First things first. Since our aim is to process gestures in real time, we obviously something to give us some sort of a real-time video input. A modern day contraption that can somehow capture the essence of vision and translate it into a digital stream of bytes. Something so..... screw it, enough Dora-the-explorer. We need a camera. A webcam is the first choice, for it is usually already there on your laptop. It gets tricky when you don&#39;t have a laptop, or a dedicated webcam, as happened with one of our teammates.
Using a webcam with OpenCV is simple, as the following snippet shows:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>

<span class="c">## Create a capture device instance</span>
<span class="c">## For more:  http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html#videocapture-videocapture</span>
<span class="n">cap</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c">## While the capture device is open</span>
<span class="k">while</span> <span class="n">cap</span><span class="o">.</span><span class="n">isOpened</span><span class="p">():</span>
    <span class="c">## Grab a frame (current image in the memory)</span>
    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cap</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
    <span class="c">## Process as desired</span>

<span class="c">## Release camera object when done</span>
<span class="n">cap</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</code></pre></div>
<p>But not all hope is lost! Turns out, with a little bit of hacking around, it&#39;s possible to use an android device with a camera for the purpose. <a href="https://play.google.com/store/apps/details?id=com.pas.webcam">Here</a> you can find a marvelous little application, <em>IP Webcam</em>, that allows you to locally stream from your mobile camera. You can simply view the stream on the browser/VLC of another device by keying in the IP and the port of the server you run (using the app).
The tricky part is when you need to use it as a video feed and process it in OpenCV. This is where you need to have a work-around. But don&#39;t worry, I saved you the trouble and whipped up this little script which would be useful. Just clone/download <a href="https://github.com/TigerKid001/AndroidCamFeed">this repo</a> or simply get the <code>[AndroidCamFeed](https://github.com/TigerKid001/AndroidCamFeed/blob/master/AndroidCamFeed.py)</code> file. The usage is simple and demonstrated in the <a href="https://github.com/TigerKid001/AndroidCamFeed/blob/master/AndroidCamFeed.py"><code>Example.py</code></a>. Import the module and use like you would use the cv2.VideoCapture; the interface is pretty much the same (which, by the way, is no coincidence). Here&#39;s a snippet for example:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">## Import AndroidCamFeed module</span>
<span class="kn">from</span> <span class="nn">AndroidCamFeed</span> <span class="kn">import</span> <span class="n">AndroidCamFeed</span>

<span class="c">## set host = address of server, in &lt;IP&gt;:&lt;port&gt; format</span>
<span class="c">## Replace the string with your own server&#39;s IP and port</span>
<span class="n">host</span> <span class="o">=</span> <span class="s">&#39;192.168.1.2:8080&#39;</span>

<span class="c">## Create new ACF instance with host as parameter</span>
<span class="n">acf</span> <span class="o">=</span> <span class="n">AndroidCamFeed</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>

<span class="c">## While acf is open</span>
<span class="k">while</span> <span class="n">acf</span><span class="o">.</span><span class="n">isOpened</span><span class="p">():</span>

        <span class="c">## Read frame</span>
        <span class="n">frame</span> <span class="o">=</span> <span class="n">acf</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">frame</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c">## Process frame</span>

<span class="c">## Must release ACF object before exiting.</span>
<span class="n">acf</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</code></pre></div>
<h4>A sleight of hand</h4>

<p>The next step we take towards the goal is detecting the hand. This can be tricky and there a many algorithms that try to achieve this. In my personal experience, transforming the image into Y-Cr-Cb color space is effective, especially when coupled with Gaussian Blur and thresholding using Otsu algorithm. Don&#39;t be overwhelmed, we&#39;ll take them all down piece by piece. Starting with color spaces.</p>

<p>The default input from your capture device is in RGB color space. This is the color space we see the world in, with our eyes. Though there are methods to detect skin (and thereby hand) from this color space, they may not be as effective as the others. So we change the color space of the image to the <a href="https://en.wikipedia.org/wiki/YCbCr">Y-Cr-Cb</a> color space. The transformation can be done with literally one line of code:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">imgYCC</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2YCR_CB</span><span class="p">)</span>
</code></pre></div>
<p>Now that we have the image in the required format, we need to find a way to identify what range of the  Y-Cr-Cb values gives us the clearest view of the skin. Once we have skin, we can figure out the hand.
There are again many options for finding the sweet spot. I&#39;d recommend you do some reading/innovating of your own and find a range that best suits you. For help, you may consider reading through research papers such as <a href="http://arxiv.org/pdf/1212.0134.pdf">this</a>, <a href="http://people.sabanciuniv.edu/mcetin/publications/malima_SIU06.pdf">this</a> and <a href="https://www.google.co.in/webhp?hl=en#hl=en-IN&amp;q=elliptical+boundary+model+skin+color+detection">this</a>. There are plenty more so you can dig as deep as you want.</p>

<p>I experimented both manually (by setting up trackbars and manually setting values to optimal range) and by using the elliptical boundary model for skin color detection. While manual settings offer a better and finer control, it&#39;s a pain to adjust the values.</p>

<p>So, by now you probably have effectively separated the hand component from the rest of the image. Your resulting image may look something like this:</p>

<p><img src="/assets/images/post_images/SkinMask.jpg" alt="SkinMask.jpg"></p>

<p>A little rough around the edges eh? To soften the rough edges, we can use this simple morphology snippet:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">## Used for erosion and dilation</span>
<span class="n">kernel</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="n">size1</span><span class="p">,</span> <span class="n">size2</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span>

<span class="c">## Erode then dilate to smoothen out the edges. Check their documentation for more details</span>
<span class="n">frame2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">erode</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">kernel</span><span class="p">,</span> <span class="n">iterations</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">frame2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">dilate</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">kernel</span><span class="p">,</span> <span class="n">iterations</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>

<span class="c">## Use opening and closing morphological transformations to remove those annoying little dots</span>
<span class="n">frame2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_OPEN</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span>
<span class="n">frame2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_CLOSE</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span>
</code></pre></div>
<p>To smoothen it out more, we use <a href="https://en.wikipedia.org/wiki/Gaussian_blur">Gaussian Blur</a> and then <a href="http://docs.opencv.org/modules/imgproc/doc/miscellaneous_transformations.html">threshold</a> using the <a href="https://en.wikipedia.org/wiki/Otsu&#x27;s_method">Otsu algorithm</a> as shown:</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">## Here, (x, y) is a tuple denoting the Gaussian kernel size, with Gaussian kernel standard deviation ## in X direction being 0, (for Y direction, it is 0 by default)</span>
<span class="n">imgYCC</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">imgYCC</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

<span class="c">## Set 0 and 255 to the desired minimum and maximum thresholds. (Psst.. experiment time)</span>
<span class="n">ret</span><span class="p">,</span> <span class="n">imgYCC</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">imgYCC</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_OTSU</span><span class="p">)</span>
</code></pre></div>
<p><em>yawnnn...</em> OK, so now we have a nice and smooth image to work on. Looking back at it all, it doesn&#39;t look like we have a long way, but believe me, getting here the way we did is big task. Extracting the hand out of an RGB (or BGR, as it used in OpenCV) image is half the job (well, a little less than half, but you get the point). In the next post, we&#39;ll discuss a little more about hand exatraction, specifically blob analysis. Then we&#39;ll continue on to detecting the hand, and experiment with algorithms to accurately detect parts of the hand.</p>

<p>And this is the point where I am looking at you, no expression, a blank poker face, hoping you&#39;ll get the signal, say thanks and bid farewell.. No, I don&#39;t mean you to go, it&#39;s just.. I&#39;m tired and there&#39;s a lot more I&#39;d like to talk about in more detail, but some other time. (Very soon, I promise). So, there you go. You can go on and experiment, research, play/mess with that code.
And if you like, you can even check out our project <a href="http://github.com/TigerKid001/Dex">Dex</a>, as we call it. Help will be much appreciated ;)</p>

<p>As a great wizard once said,</p>

<blockquote>
<p>Fly, you fools!</p>
</blockquote>

<p>Happy coding :)
<br /><br /></p>

<hr>

<p><strong><sup id="minor-one">1</sup></strong>
The first Minor project idea was that of an automated bot that would crack Google&#39;s new NoCaptcha reCaptcha system by imitating organic mouse movements and selecting the correct images for the given keyword. Sadly, it was dropped because of time constraints.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Bling Bling Blink</title>
	  <link>sidhant.io/bling-blink-blink</link>
	  <author>Sidhant Sharma</author>
	  <pubDate>2015-09-15T00:00:00+05:30</pubDate>
	  <guid>sidhant.io/bling-blink-blink</guid>
	  <description><![CDATA[
	     <p>Hey, do you use Google Chrome most of the time? All the time? Good for you. &#39;Cause I don&#39;t. I like Firefox better. I have my own reasons (not getting into that here). But you know what, I&#39;m jealous of you. No seriously, I am jealous of Chrome users. I mean, you have an extension for everything. Literally. Need something to dim the webpages at night? Bang! There&#39;s an extension. Need a prettier new tab page? Boom! There you have it. And why do they have to be pretty? Why does every extension in Google Chrome have to be pretty and smooth and bursting with colors? What is it, Disneyland? If you&#39;ve read my last blog post, you&#39;d probably know what this is one is about. This post is about... (drum rolls) ... another Firefox add-on. This time, it&#39;s about <a href="https://addons.mozilla.org/en-US/firefox/addon/blink/">Blink</a>. A Firefox add-on I made to make the new tab page more interesting. Here&#39;s how it started:</p>

<p><em>Fading out, Ripple effect, Entering black and white flashback</em></p>

<p>It was a bright sunny day in the city of Delhi. I was in college hanging out with my buddies, happy and oblivious to what was going to happen next. One of them was doing something on his laptop. And there, I saw a glimpse of something so intriguing and enticing, that could not help but ask what that beautiful webpage was called. Turns out, it wasn&#39;t a web page. It was his new tab page. Yes, New Tab. The most heavily-ignored browser tab in the history of computer. My friend told me it was a Chrome extension called <a href="https://tabbie.io/">Tabbie</a>. A lovely piece of software craftsmanship and curios innovation. I wanted it. I needed it. I had to have it. Just like a 6 year old needs that Superman action figure.</p>

<p><em>Ripple effect.. Fade back in.. Back to the <strike>future</strike> present</em></p>

<p>But alas, no one cares to make pretty extensions for Firefox. &#39;No problem, I&#39;ll make one&#39; said a voice inside my head. And there it started.</p>

<p>There were already some New Tab replacement add-ons for Firefox, but nothing like what I wanted. Oh, did I forget to tell what Tabbie (and now Blink) do? Silly me. Well, you know how there&#39;s a tonne of websites and webpages you follow to keep you updated with stuff you like? You might enjoy some beautiful art and animations from Dribbble, or some tech news from TechCrunch or the likes. That&#39;s exactly what they do. These extensions bring the latest news from around the world right to your New Tab page. Why new tab page? Because that is the one page you open the most, and yet never pay attention to. It&#39;s the perfect spot to put some nice content and grab your attention. So there I was, spending most of my spare time in searching and experimenting things for Blink. If you read my [previous post] on Firefox add-ons, you&#39;re probably all set already. If not, you might wanna go there and take a loot at how things are done in Firefox Add-on development. Simple stuff, Javascript mainly.  There were a few key checkpoints I am particularly fond of. So, here they are:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html">                                <span class="nt">&lt;geek&gt;</span>
</code></pre></div>
<p><strong>1.</strong>
Clearing the URL bar when opening a custom New Tab page. One thing we don&#39;t want is to see an ugly url in the URL bar of the New Tab page. It should be empty, without fail. To do that in Firefox, we can use gInitialPages list of the browser. Adding a URL to this list makes Firefox show it as a blank url. So, adding our custom New Page&#39;s url to this list should serve our purpose well. Here&#39;s a code snippet that shows how to do this,</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">clearTabUrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">windows</span> <span class="o">=</span> <span class="nx">windowMediator</span><span class="p">.</span><span class="nx">getEnumerator</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">windows</span><span class="p">.</span><span class="nx">hasMoreElements</span><span class="p">())</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">windows</span><span class="p">.</span><span class="nx">getNext</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">gInitialPages</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">newTabURL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">gInitialPages</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newTabURL</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>That does the trick. You see that I saved the current New Tab url for later use. That&#39;s because currently the user cannot manually change the newtab.url property (unless they edit it from about:config page). So, it is very important to remove your url from this list when your add-on is uninstalled/disabled in order to restore previous settings. For that, we can simply set an unload listener for the add-on and remove the url from it. Something like</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">clearSettings</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">services</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;browser.newtab.url&quot;</span><span class="p">,</span> <span class="nx">oldNewTab</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">windows</span> <span class="o">=</span> <span class="nx">windowMediator</span><span class="p">.</span><span class="nx">getEnumerator</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">windows</span><span class="p">.</span><span class="nx">hasMoreElements</span><span class="p">())</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nb">window</span> <span class="o">=</span> <span class="nx">windows</span><span class="p">.</span><span class="nx">getNext</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">gInitialPages</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">newTabURL</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">gInitialPages</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">gInitialPages</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">newTabURL</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Ok, hate to admit, but I&#39;m not a genius. I didn&#39;t figure this out by myself. The credit goes to this post on <a href="https://mike.kaply.com/2012/06/21/best-practices-for-overriding-the-new-tab-page-with-your-extension/">Michael Kaply&#39;s blog</a>. Check it out for more on overriding the new tab page <sup><a href="#new-sdk">1</a></sup>.</p>

<p><strong>2.</strong>
Another thing I&#39;m particularly excited about is that Blink allows the users to configure their feeds. That is, you can add new content to your feed simply by adding the link to its RSS feed. (Yeah, Blink works on RSS). Making that part of Blink was a brainer. Not because it&#39;s tough, but because it&#39;s not so intuitive. I&#39;ll give you a hint on how I managed it: simple-storage module and message-passing. Got it? No? Chill, the code for it is here. See the two pagemods and a couple of scripts that run when certain pages are loaded? That&#39;s it. Those scripts are doing a classic Firefox add-on style message passing dance. That&#39;s new feeds can be added and unwanted be removed, by just passing around the list of desired feeds.
Parsing the feed.</p>

<p><strong>3.</strong>
I know covering this would basically cover the whole add-on code, but sorry, can&#39;t help it. This is the part I learned partly from here and partly by experimenting with Google Feed API and the DOM API. For a quick run-through, check this code out:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">addContent</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Parsing feed from: &quot;</span> <span class="o">+</span> <span class="nx">url</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;cards-container&#39;</span><span class="p">);</span>
  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
    <span class="nx">url</span><span class="o">:</span><span class="s1">&#39;https://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;num=10&amp;callback=?&amp;q=&#39;</span> <span class="o">+</span>
        <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">url</span><span class="p">),</span>
    <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
    <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">responseData</span><span class="p">.</span><span class="nx">feed</span><span class="p">.</span><span class="nx">entries</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">title</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">imageSource</span> <span class="o">=</span> <span class="nx">getImageSource</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">contentSnippet</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">contentSnippet</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">link</span><span class="p">;</span>
        <span class="c1">// create card</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">title</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">link</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">cardsource</span> <span class="o">=</span> <span class="nx">newHope</span><span class="p">(</span><span class="nx">title</span><span class="p">,</span> <span class="nx">imageSource</span><span class="p">,</span> <span class="nx">contentSnippet</span><span class="p">,</span> <span class="nx">link</span><span class="p">);</span>
          <span class="kd">var</span> <span class="nx">card</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
          <span class="nx">card</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;col s12 m4&quot;</span><span class="p">);</span>
          <span class="nx">card</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">cardsource</span><span class="p">);</span>
          <span class="nx">container</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">card</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">},</span>
    <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">jqXHR</span><span class="p">,</span> <span class="nx">textStatus</span><span class="p">,</span> <span class="nx">errorThrown</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;jqXHR: &quot;</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">jqXHR</span><span class="p">)</span> <span class="o">+</span>
                    <span class="s2">&quot;\nstatus: &quot;</span> <span class="o">+</span> <span class="nx">textStatus</span> <span class="o">+</span> <span class="s2">&quot;\nerror: &quot;</span> <span class="o">+</span> <span class="nx">errorThrown</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div>
<p>The method calls for getting card and image facilitate creating the material cards in which the news items are shown. It uses the <a href="http://materializecss.com/">Materialize CSS</a> framework. You can check the full code out <a href="https://github.com/TigerKid001/Blink/blob/master/data/sources/js/contentFiller.js">here</a>.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html">                                    <span class="nt">&lt;/geek&gt;</span>
</code></pre></div>
<p>So, that was that. Blink is available <a href="https://addons.mozilla.org/en-US/firefox/addon/blink/">here</a> for your evaluation. It&#39;s ready for use by people, even though just v0.2.1 (It&#39;s stable, don&#39;t worry). Want a sneek-peak right away? here:</p>

<p><img src="/assets/images/post_images/blink_home_v0.2.1.png" alt="Blink Home"></p>

<p>There are a couple more features I want to add to Blink. And honestly, I too feel a complete UI overhaul is required. But because of the imminent change in the Firefox SDK as declared by Mozilla <a href="https://blog.mozilla.org/addons/2015/08/21/the-future-of-developing-firefox-add-ons/">here</a>, some API features will be removed. (The one that concerns Blink, and even Owl for that matter, is the Chrome authority). So, I&#39;ll pause the development of Blink till I know better. Feel free to check out the Blink&#39;s source on Github, it&#39;s under MIT License, so mess with it as you will!</p>

<p>See you soon.
Stay Hungry, stay foolish!</p>

<p><br /><br />
<sup>1</sup>: Since the writing of this post, a lot has changed in this part of the SDK. The above code worked only uptil Fx44.0. You might wanna look at Blink&#39;s <a href="https://github.com/tigerkid001/blink">current source</a> or search <a href="https://stackoverflow.com">StackOverflow</a> for a more recent method.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Into the darkness</title>
	  <link>sidhant.io/into-the-darkness</link>
	  <author>Sidhant Sharma</author>
	  <pubDate>2015-06-29T00:00:00+05:30</pubDate>
	  <guid>sidhant.io/into-the-darkness</guid>
	  <description><![CDATA[
	     <p>Being a software developer usually means long hours of working on computer, staring at the screen as if the meaning of life was hidden somewhere in those lines of code. But developer or not, looking at bright screens for longer durations is very straining to the eyes for everyone. So I prefer setting my IDE&#39;s theme to Darkula, or a similar dark theme, to save my eyes from being scorched. And have to admit, it&#39;s very cozy. The nice and dark background with dim-florescent text soothes the eye like the cool brook water to the lonely traveler.</p>

<p>All looks fine so far, but then suddenly, there is this function I need to use, but I can&#39;t remember it&#39;s correct usage. Or a weird error I haven&#39;t seen before, and I can&#39;t figure it out. And the only way out? Google. This is where the problem arises. The Internet has somehow developed a fondness towards bright white/ off-white backgrounds. Every typical website has a pale white background and text in black, links in blue. Regular Internet standards, can&#39;t complain. But for someone who is just switching from a dark IDE screen to the browser, this transition can torch the eyes. (You&#39;re more likely to understand this if you too like dark themes for your IDEs, or work a lot with Photoshop or Illustrator.)
And then one day, I decided I&#39;ve had enough. I <em>needed</em> something to turn those glaring websites dark. Thus began a quest for browser extensions. I use Firefox as my default browser, <a href="http://addons.mozilla.org/">AMO</a> my only hope. Surprisingly enough, I couldn&#39;t find an add-on that would do what I needed done. There were some that made an overlay on the webpage and displayed only the main content, doing away with distracting images and links. But nah, this ain&#39;t what I want.</p>

<p>So I figured, &quot;Hey, if there isn&#39;t a good add-on out there to do this, why not make one for myself&quot;. And in this moment, the idea of Owl was born. I began with Mozilla&#39;s blog post <a href="https://blog.mozilla.org/addons/2014/06/05/how-to-develop-firefox-extension/">&quot;How to develop a Firefox extension&quot;</a> and realized that this mini-project needs JavaScript. And I don&#39;t know JS. Yet.</p>

<p>First things first, I took a Udacity course on <a href="https://www.udacity.com/course/javascript-basics--ud804">JavaScript Basics</a> (nice course, too easy). Now that I had a basic idea of js, it was time to code.
I guess I&#39;ll take a slight detour from the story and get you familiar with the Firefox add-on development process. First, you need to get the <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Installation">SDK</a>. Installation is simple, and the documentation fantastic. Just follow the link above and you&#39;d be ready for dev even before you know it. (Psst.. One more thing, might wanna take a look at <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Getting_Started_(jpm)">jpm</a>. )
Installed and ready? Great. Let&#39;s get our hand dirty with some code. To create a new add-on skeleton (booooo....skeleton...boooo..), pull up terminal and do</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>mkdir hellworld-addon
</code></pre></div><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd </span>helloworld-addon
</code></pre></div><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>jpm init              <span class="c"># initialized a new add-on skeleton</span>
</code></pre></div>
<p>Now JPM will ask you (a lot of) questions about the add-on you&#39;re making. Put in whatever you want, or just keep hitting Enter for defaults. You can always change them later in the <code>package.json</code>.</p>

<p>Tada, a new add-on has been created. But it doesn&#39;t do much yet.
Anyways, back to the story. I too followed these steps and created skeleton for Owl add-on. Now comes the cool part. Code.</p>

<p>I need a piece of code that would change the background of the whole webpage to some dark color I want, and change the text and link colors accordingly. For this, I came with my first amateur solution. We know that HTML webpages contain div-elements. Sometimes, lots of them. What if we iterate through all the div-elements of the webpage, and set a dark background for each of them. The code looked something like this:</p>
<div class="highlight"><pre><code class="language-JavaScript" data-lang="JavaScript"><span class="kd">var</span> <span class="nx">divs</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>

<span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">divs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>

   <span class="nx">divs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="s1">&#39;black&#39;</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div>
<p>To compile and run an add-on, we simple execute</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>jpm run
</code></pre></div>
<p>If you&#39;re on Linux (or Mac OS X), the run operation may fail saying</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">JPM <span class="o">[</span>error<span class="o">]</span> Specify a Firefox binary to use with the <span class="sb">`</span>-b<span class="sb">`</span> flag.
JPM <span class="o">[</span>error<span class="o">]</span> Error: spawn ENOENT
</code></pre></div>
<p>This happens when jpm doesn&#39;t know where Firefox is installed. To specify it the location of the Firefox binary, use the <code>-b</code> flag as:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>jpm run -b &lt;path/to/file&gt;
</code></pre></div>
<p>The results were, well, bad. It worked well on Google homepage. But that was about it. Everywhere else, one or the other element was left out. This wasn&#39;t working. At all.
So, back to the thinking chair. While surfing through the Add-on SDK documentation, I discovered that it was also possible to add CSS dynamically to webpages. So I dug a little deeper and figured out a way to add a seemingly-alright CSS to the webpages when they load. This time, the results were better. But still, no. Something wasn&#39;t working. (Actually, a lot it wasn&#39;t). Sometimes there&#39;d be no change at all, sometimes the whole webpage would turn black. So Plan B failed too.</p>

<p>Nevertheless, the need to protect my (rather our) eyes from the glaring white webpages was strong enough to keep me looking. A week later, I stumbled upon <a href="https://developer.mozilla.org/en/docs/Using_the_Stylesheet_Service">this</a>. Doesn&#39;t look like much, but it is actually a way to attach style sheets to a webpages without disturbing other content. So, there I was trying to make this work. Thanks a good example I found online (sorry, lost the link), I wrote (copied) a CSS style sheet that could modify the webpage&#39;s theme to what I want. (The final CSS I decided on was <a href="https://github.com/TigerKid001/Owl/blob/master/data/owlTheme.css">this</a>). Compile and run. Fingers crossed.</p>

<p>Great Scott! It works! Though a couple of glitches, (some icons/images disappeared) but it was waaay better that any of the previous attempts. &quot;That&#39;s it!&quot;, I said to myself. Now, all I need is an icon for this extension, and it&#39;s ready to be published. Quick google search of &#39;owl cartoon&#39; gave a cute looking owl with big-bright eyes. I knew this is the one. Got the image, quickly edited with GIMP, made grayscale versions and done! There we have it.
To publish an extension, we are needed to bundle it up in .xpi file. Again, terminal to the rescue:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>jpm xpi
</code></pre></div>
<p>And there we have the xpi. Now, simply drag and drop this xpi into Firefox and it&#39;ll install automatically. There you go, a ready-to-use homebrew add-on.</p>

<p>Having made the add-on, I decided to publish it online, to the AMO. You know, maybe there are other people who need this? So I went ahead and published it <a href="https://addons.mozilla.org/en-US/firefox/addon/owl/">here</a>.
Not even a week passed since I put it up online, when I got this email from <a href="http://www.ilovefreesoftware.com/">I <span>&hearts;</span> Free Software</a> (a nice tech blog) that they have used my add-on and they really liked it :). They even sent me a badge to show off!</p>

<p><img src="/assets/images/post_images/ilfs_review_badge.png" alt="I love Free Software 5-Star badge"></p>

<p>Is this amazing or what! Shout out to <a href="http://www.ilovefreesoftware.com/">I <span>&hearts;</span> Free Software</a> for their awesome review.</p>

<p>Signing off now,
Enjoy!</p>

<p>PS: The source code of the add-on is available on <a href="https://github.com/TigerKid001/Owl">Github</a> under MIT License. Feel free to play with it :)</p>

	  ]]></description>
	</item>


</channel>
</rss>
